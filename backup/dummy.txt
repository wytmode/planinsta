"use client"

import React, { useState } from "react"
import ReactMarkdown from "react-markdown"
import { Button } from "@/components/ui/button"
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Separator } from "@/components/ui/separator"
import {
  Download,
  Edit3,
  FileText,
  Target,
  Package,
  Users,
  TrendingUp,
  DollarSign,
  Shield,
  FileText as AppendixIcon,
  CheckCircle,
} from "lucide-react"
import type { BusinessPlanData, GeneratedPlan } from "@/app/plan-builder/page"

interface PlanOutputProps {
  planData: BusinessPlanData
  generatedPlan: GeneratedPlan
  onEditSection: (sectionKey: string) => void
  onDownload: () => void
}

export function PlanOutput({
  planData,
  generatedPlan,
  onEditSection,
  onDownload,
}: PlanOutputProps) {
  const [hoveredSection, setHoveredSection] = useState<string | null>(null)
  const businessName = planData.businessName || "Your Business"

  const sections = [
    {
      key: "executiveSummary",
      title: "Executive Summary",
      description: "Business overview, funding, milestones, problem & solution",
      icon: FileText,
      render: () => (
        <>
          <h3 id="executiveSummary" className="font-bold">Business Overview</h3>
          <ReactMarkdown>
            {generatedPlan.executiveSummary.businessOverview}
          </ReactMarkdown>
          <h3 className="font-bold">Funding Requirements &amp; Usage of Funds</h3>
          <ReactMarkdown>
            {generatedPlan.executiveSummary.fundingRequirementsUsageOfFunds}
          </ReactMarkdown>
          <h3 className="font-bold">Past Milestones</h3>
          <ReactMarkdown>
            {generatedPlan.executiveSummary.pastMilestones}
          </ReactMarkdown>
          <h3 className="font-bold">Problem Statement &amp; Solution</h3>
          <ReactMarkdown>
            {generatedPlan.executiveSummary.problemStatementSolution}
          </ReactMarkdown>
        </>
      ),
    },
    {
      key: "companyOverview",
      title: "Company Overview",
      description: "Vision, mission, background, team, values & objectives",
      icon: Package,
      render: () => (
        <>
           <h3 id="companyOverview" className="font-bold">Vision Statement</h3>
          <ReactMarkdown>
            {generatedPlan.companyOverview.visionStatement}
          </ReactMarkdown>
          <h3 className="font-bold">Mission Statement</h3>
          <ReactMarkdown>
            {generatedPlan.companyOverview.missionStatement}
          </ReactMarkdown>
          <h3 className="font-bold">Company History &amp; Background</h3>
          <ReactMarkdown>
            {generatedPlan.companyOverview.companyHistoryBackground}
          </ReactMarkdown>
          <h3 className="font-bold">Founding Team</h3>
          <ReactMarkdown>
            {generatedPlan.companyOverview.foundingTeam}
          </ReactMarkdown>
          <h3 className="font-bold">Legal Structure &amp; Ownership</h3>
          <ReactMarkdown>
            {generatedPlan.companyOverview.legalStructureOwnership}
          </ReactMarkdown>
          <h3 className="font-bold">Core Values &amp; Culture</h3>
          <ReactMarkdown>
            {generatedPlan.companyOverview.coreValuesCulture}
          </ReactMarkdown>
          <h3 className="font-bold">Company Objectives</h3>
          <ReactMarkdown>
            {generatedPlan.companyOverview.companyObjectives}
          </ReactMarkdown>
        </>
      ),
    },
    {
      key: "products",
      title: "Products",
      description: "Overview, details, USPs, roadmap & IP status",
      icon: Target,
      render: () => (
        <>
          <h3 id="products" className="font-bold">Overview</h3>
          <ReactMarkdown>{generatedPlan.products.overview}</ReactMarkdown>
          {Array.from({ length: 10 }, (_, i) => (
            <React.Fragment key={i}>
              <h3 className="font-bold">Product {i + 1}</h3>
              <ReactMarkdown>
                {(generatedPlan.products as any)[`product${i + 1}`]}
              </ReactMarkdown>
            </React.Fragment>
          ))}
          <h3 className="font-bold">Unique Selling Propositions (USPs)</h3>
          <ReactMarkdown>
            {generatedPlan.products.uniqueSellingPropositions}
          </ReactMarkdown>
          <h3 className="font-bold">Development Roadmap</h3>
          <ReactMarkdown>
            {generatedPlan.products.developmentRoadmap}
          </ReactMarkdown>
          <h3 className="font-bold">Intellectual Property &amp; Regulatory Status</h3>
          <ReactMarkdown>
            {generatedPlan.products.intellectualPropertyRegulatoryStatus}
          </ReactMarkdown>
        </>
      ),
    },
    {
      key: "marketAnalysis",
      title: "Market Analysis",
      description: "Industry overview, trends, segmentation & competition",
      icon: Target,
      render: () => (
        <>
          <h3 id="marketAnalysis" className="font-bold">Industry Overview &amp; Size</h3>
          <ReactMarkdown>
            {generatedPlan.marketAnalysis.industryOverviewSize}
          </ReactMarkdown>
          <h3 className="font-bold">Growth Trends &amp; Drivers</h3>
          <ReactMarkdown>
            {generatedPlan.marketAnalysis.growthTrendsDrivers}
          </ReactMarkdown>
          <h3 className="font-bold">Underlying Business Drivers</h3>
          <ReactMarkdown>
            {generatedPlan.marketAnalysis.underlyingBusinessDrivers}
          </ReactMarkdown>
          <h3 className="font-bold">Target Market Segmentation</h3>
          <ReactMarkdown>
            {generatedPlan.marketAnalysis.targetMarketSegmentation}
          </ReactMarkdown>
          <h3 className="font-bold">Customer Personas &amp; Their Needs</h3>
          <ReactMarkdown>
            {generatedPlan.marketAnalysis.customerPersonasNeeds}
          </ReactMarkdown>
          <h3 className="font-bold">Competitive Landscape &amp; Positioning</h3>
          <ReactMarkdown>
            {generatedPlan.marketAnalysis.competitiveLandscapePositioning}
          </ReactMarkdown>
          <h3 className="font-bold">Products’ Differentiation</h3>
          <ReactMarkdown>
            {generatedPlan.marketAnalysis.productsDifferentiation}
          </ReactMarkdown>
          <h3 className="font-bold">Barriers to Entry</h3>
          <ReactMarkdown>
            {generatedPlan.marketAnalysis.barriersToEntry}
          </ReactMarkdown>
        </>
      ),
    },
    {
      key: "marketingSalesStrategies",
      title: "Marketing & Sales Strategies",
      description: "Channels, cost structure, pricing & retention",
      icon: Users,
      render: () => (
        <>
          <h3 id="marketingSalesStrategies" className="font-bold">Distribution Channels</h3>
          <ReactMarkdown>
            {generatedPlan.marketingSalesStrategies.distributionChannels}
          </ReactMarkdown>
          <h3 className="font-bold">Technology Cost Structure</h3>
          <ReactMarkdown>
            {generatedPlan.marketingSalesStrategies.technologyCostStructure}
          </ReactMarkdown>
          <h3 className="font-bold">Customer Pricing Structure</h3>
          <ReactMarkdown>
            {generatedPlan.marketingSalesStrategies.customerPricingStructure}
          </ReactMarkdown>
          <h3 className="font-bold">Retention Strategies</h3>
          <ReactMarkdown>
            {generatedPlan.marketingSalesStrategies.retentionStrategies}
          </ReactMarkdown>
          <h3 className="font-bold">Integrated Funnel &amp; Financial Impact</h3>
          <ReactMarkdown>
            {generatedPlan.marketingSalesStrategies.integratedFunnelFinancialImpact}
          </ReactMarkdown>
        </>
      ),
    },
    {
      key: "operationsPlan",
      title: "Operations Plan",
      description: "Structure, workflow & KPIs",
      icon: TrendingUp,
      render: () => (
        <>
          <h3 id="operationsPlan" className="font-bold">Overview</h3>
          <ReactMarkdown>{generatedPlan.operationsPlan.overview}</ReactMarkdown>
          <h3 className="font-bold">Organizational Structure &amp; Team Responsibilities</h3>
          <ReactMarkdown>
            {generatedPlan.operationsPlan.organizationalStructureTeamResponsibilities}
          </ReactMarkdown>
          <h3 className="font-bold">Infrastructure</h3>
          <ReactMarkdown>{generatedPlan.operationsPlan.infrastructure}</ReactMarkdown>
          <h3 className="font-bold">Customer Onboarding‑to‑Renewal Workflow</h3>
          <ReactMarkdown>
            {generatedPlan.operationsPlan.customerOnboardingToRenewalWorkflow}
          </ReactMarkdown>
          <h3 className="font-bold">Cross‑Functional Communication &amp; Decision‑Making</h3>
          <ReactMarkdown>
            {generatedPlan.operationsPlan.crossFunctionalCommunicationDecisionMaking}
          </ReactMarkdown>
          <h3 className="font-bold">Key Performance Metrics &amp; Goals</h3>
          <ReactMarkdown>
            {generatedPlan.operationsPlan.keyPerformanceMetricsGoals}
          </ReactMarkdown>
        </>
      ),
    },
    {
      key: "managementOrganization",
      title: "Management & Organization",
      description: "Chart, roles & hiring plan",
      icon: Users,
      render: () => (
        <>
          <h3 className="font-bold">Overview</h3>
          <ReactMarkdown>
            {generatedPlan.managementOrganization.overview}
          </ReactMarkdown>
          <h3 className="font-bold">Organizational Chart</h3>
          <ReactMarkdown>
            {generatedPlan.managementOrganization.organizationalChart}
          </ReactMarkdown>
          <h3 className="font-bold">Hiring Plan &amp; Key Roles</h3>
          <ReactMarkdown>
            {generatedPlan.managementOrganization.hiringPlanKeyRoles}
          </ReactMarkdown>
        </>
      ),
    },
   {
      key: "financialPlan",
      title: "Financial Plan",
      description: "Assumptions, forecasts, P&L, cash flow & metrics",
      icon: DollarSign,
      render: () => (
        <>
          <h3 id="financialPlan" className="font-bold">Overview</h3>
          <ReactMarkdown>{generatedPlan.financialPlan.overview}</ReactMarkdown>

          <h3 className="font-bold">Key Assumptions</h3>
          <ReactMarkdown>{generatedPlan.financialPlan.keyAssumptions}</ReactMarkdown>

          <h3 className="font-bold">Revenue Forecast</h3>
          <table className="w-full table-auto border-collapse border">
            <thead>
              <tr>
                <th className="border px-2 py-1 text-left">Period</th>
                <th className="border px-2 py-1 text-left">Amount</th>
              </tr>
            </thead>
            <tbody>
              {generatedPlan.financialPlan.revenueForecast.map((row, i) => (
                <tr key={i}>
                  <td className="border px-2 py-1">{row.period}</td>
                  <td className="border px-2 py-1">{row.amount}</td>
                </tr>
              ))}
            </tbody>
          </table>

          <h3 className="font-bold">Cost of Goods Sold (COGS)</h3>
          <table className="w-full table-auto border-collapse border">
            <thead>
              <tr>
                <th className="border px-2 py-1 text-left">Period</th>
                <th className="border px-2 py-1 text-left">COGS</th>
              </tr>
            </thead>
            <tbody>
              {generatedPlan.financialPlan.cogs.map((row, i) => (
                <tr key={i}>
                  <td className="border px-2 py-1">{row.period}</td>
                  <td className="border px-2 py-1">{row.amount}</td>
                </tr>
              ))}
            </tbody>
          </table>

          <h3 className="font-bold">Operating Expenses (OpEx)</h3>
          <table className="w-full table-auto border-collapse border">
            <thead>
              <tr>
                <th className="border px-2 py-1 text-left">Period</th>
                <th className="border px-2 py-1 text-left">OpEx</th>
              </tr>
            </thead>
            <tbody>
              {generatedPlan.financialPlan.opEx.map((row, i) => (
                <tr key={i}>
                  <td className="border px-2 py-1">{row.period}</td>
                  <td className="border px-2 py-1">{row.amount}</td>
                </tr>
              ))}
            </tbody>
          </table>

          <h3 className="font-bold">Projected Profit &amp; Loss Statement (P&L)</h3>
          <table className="w-full table-auto border-collapse border">
            <thead>
              <tr>
                <th className="border px-2 py-1 text-left">Period</th>
                <th className="border px-2 py-1 text-left">Gross Profit</th>
                <th className="border px-2 py-1 text-left">EBITDA</th>
                <th className="border px-2 py-1 text-left">Net Income</th>
              </tr>
            </thead>
            <tbody>
              {generatedPlan.financialPlan.projectedPnl.map((row, i) => (
                <tr key={i}>
                  <td className="border px-2 py-1">{row.period}</td>
                  <td className="border px-2 py-1">{row.grossProfit}</td>
                  <td className="border px-2 py-1">{row.ebitda}</td>
                  <td className="border px-2 py-1">{row.netIncome}</td>
                </tr>
              ))}
            </tbody>
          </table>

          <h3 className="font-bold">Cash Flow &amp; Runway Analysis</h3>
          <table className="w-full table-auto border-collapse border">
            <thead>
              <tr>
                <th className="border px-2 py-1 text-left">Period</th>
                <th className="border px-2 py-1 text-left">Begin Cash</th>
                <th className="border px-2 py-1 text-left">Inflows</th>
                <th className="border px-2 py-1 text-left">Outflows</th>
                <th className="border px-2 py-1 text-left">End Cash</th>
                <th className="border px-2 py-1 text-left">Runway (mo)</th>
              </tr>
            </thead>
            <tbody>
              {generatedPlan.financialPlan.cashFlowRunwayAnalysis.map((row, i) => (
                <tr key={i}>
                  <td className="border px-2 py-1">{row.period}</td>
                  <td className="border px-2 py-1">{row.beginningCash}</td>
                  <td className="border px-2 py-1">{row.inflows}</td>
                  <td className="border px-2 py-1">{row.outflows}</td>
                  <td className="border px-2 py-1">{row.endingCash}</td>
                  <td className="border px-2 py-1">{row.runwayMonths}</td>
                </tr>
              ))}
            </tbody>
          </table>

          <h3 className="font-bold">Key Financial Metrics &amp; Ratios</h3>
          <ReactMarkdown>
            {generatedPlan.financialPlan.keyFinancialMetricsRatios}
          </ReactMarkdown>

          <h3 className="font-bold">Use of Funds &amp; Runway</h3>
          <ReactMarkdown>
            {generatedPlan.financialPlan.useOfFundsRunway}
          </ReactMarkdown>

          <h3 className="font-bold">Key Sensitivity &amp; Risk Scenarios</h3>
          <ReactMarkdown>
            {generatedPlan.financialPlan.keySensitivityRiskScenarios}
          </ReactMarkdown>

          <h3 className="font-bold">Summary &amp; Outlook</h3>
          <ReactMarkdown>
            {generatedPlan.financialPlan.summaryOutlook}
          </ReactMarkdown>
        </>
      ),
    },
    {
      key: "riskAnalysisMitigation",
      title: "Risk Analysis & Mitigation",
      description: "All categories of risk and contingencies",
      icon: Shield,
      render: () => (
        <>
          <h3 id="riskAnalysisMitigation" className="font-bold">Overview</h3>
          <ReactMarkdown>
            {generatedPlan.riskAnalysisMitigation.overview}
          </ReactMarkdown>
          <h3 className="font-bold">Market Risks</h3>
          <ReactMarkdown>
            {generatedPlan.riskAnalysisMitigation.marketRisks}
          </ReactMarkdown>
          <h3 className="font-bold">Operational Risks</h3>
          <ReactMarkdown>
            {generatedPlan.riskAnalysisMitigation.operationalRisks}
          </ReactMarkdown>
          <h3 className="font-bold">Regulatory &amp; Legal Risks</h3>
          <ReactMarkdown>
            {generatedPlan.riskAnalysisMitigation.regulatoryLegalRisks}
          </ReactMarkdown>
          <h3 className="font-bold">Financial Risks</h3>
          <ReactMarkdown>
            {generatedPlan.riskAnalysisMitigation.financialRisks}
          </ReactMarkdown>
          <h3 className="font-bold">Contingency Plans</h3>
          <ReactMarkdown>
            {generatedPlan.riskAnalysisMitigation.contingencyPlans}
          </ReactMarkdown>
        </>
      ),
    },
    {
      key: "appendices",
      title: "Appendices",
      description: "Glossary, resources & financial tables",
      icon: AppendixIcon,
      render: () => (
        <>
          <h3 id="appendices" className="font-bold">Glossary</h3>
          <ReactMarkdown>{generatedPlan.appendices.glossary}</ReactMarkdown>
          <h3 className="font-bold">Management Teams’ Resources</h3>
          <ReactMarkdown>
            {generatedPlan.appendices.managementTeamsResources}
          </ReactMarkdown>
          <h3 className="font-bold">Projected Finances Tables</h3>
          <ReactMarkdown>
            {generatedPlan.appendices.projectedFinancesTables}
          </ReactMarkdown>
        </>
      ),
    },
  ] as const

  const completedSections = sections.filter((s) => {
    const content = (generatedPlan as any)[s.key]
    if (typeof content === "string") {
      return content.trim().length > 0
    }
    if (typeof content === "object") {
      return Object.values(content).some(
        (v) => typeof v === "string" && v.trim().length > 0
      )
    }
    return false
  }).length
  
  return (
    <div className="flex h-full bg-gray-50">
      <nav className="sticky top-4 h-[calc(100vh-2rem)] overflow-auto w-56 p-4 bg-white border-r">
        <ul className="space-y-2 text-sm">
          {sections.map((s) => (
            <li key={s.key}>
              <a
                href={`#${s.key}`}
                className="block hover:text-blue-600"
              >
                {s.title}
              </a>
            </li>
          ))}
        </ul>
      </nav>

      {/* 2) Main column: Header + Content */}
      <div className="flex-1 flex flex-col">
        {/* Header */}
        <div className="bg-white border-b border-gray-200 px-6 py-1">
          <div className="max-w-3xl mx-auto flex items-center justify-between">
            <div>
              <h1 className="text-2xl font-bold text-gray-900 mb-2">
                {businessName} — Business Plan
              </h1>
            </div>
            <Button
              onClick={onDownload}
              className="bg-gradient-to-r from-orange-500 to-red-500 hover:from-orange-600 hover:to-red-600 text-white rounded-2xl px-6 py-3 font-semibold transition-all duration-300 transform hover:scale-105"
            >
              <Download className="h-4 w-4 mr-2" />
              Download DOCX
            </Button>
          </div>
        </div>

        {/* Content */}
        <div className="flex-1 overflow-y-auto p-6">
          <div className="max-w-3xl mx-auto space-y-6">
            {sections.map((section) => {
              const Icon = section.icon
              return (
                <Card
                  key={section.key}
                  className={`border-0 shadow-lg bg-white transition-all duration-300 ${
                    hoveredSection === section.key
                      ? "shadow-xl transform scale-[1.02]"
                      : ""
                  }`}
                  onMouseEnter={() => setHoveredSection(section.key)}
                  onMouseLeave={() => setHoveredSection(null)}
                >
                  <CardHeader className="pb-4 px-6">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center space-x-4">
                        <div className="flex items-center justify-center w-12 h-12 bg-gradient-to-r from-orange-100 to-red-100 rounded-2xl">
                          <Icon className="h-6 w-6 text-orange-600" />
                        </div>
                        <div>
                          <CardTitle
                            id={section.key}                      {/* add anchor IDs here */}
                            className="text-xl font-bold text-gray-900"
                          >
                            {section.title}
                          </CardTitle>
                          <p className="text-gray-600 text-sm mt-1">
                            {section.description}
                          </p>
                        </div>
                      </div>
                      <Button
                        onClick={() => onEditSection(section.key)}
                        variant="outline"
                        size="sm"
                        className={`rounded-2xl transition-all duration-300 ${
                          hoveredSection === section.key
                            ? "opacity-100 transform scale-105 border-orange-300 text-orange-600 hover:bg-orange-50"
                            : "opacity-0"
                        }`}
                      >
                        <Edit3 className="h-4 w-4 mr-2" />
                        Ask AI to Edit
                      </Button>
                    </div>
                  </CardHeader>
                  <Separator className="mx-6" />
                  <CardContent className="pt-6 px-6 space-y-4">
                    {section.render()}
                  </CardContent>
                </Card>
              )
            })}
          </div>
        </div>
      </div>
    </div>
  )
  }
