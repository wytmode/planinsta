"use server"

import { createServerComponentClient } from "@supabase/auth-helpers-nextjs"
import { cookies } from "next/headers"
import { openai } from "@ai-sdk/openai"
import { generateObject } from "ai"
import { z } from "zod"
import type { BusinessPlanData, GeneratedPlan } from "@/app/plan-builder/PlanBuilderClient"

export type GenerateBusinessPlanResult =
  | { success: true; plan: GeneratedPlan; planId: string }
  | { success: false; error: string }

const businessPlanSchema = z.object({
  executiveSummary: z.object({
    businessOverview: z.string(),
    businessOrigins: z.string(),
    competitiveAdvantage: z.string(),
    financialSummary: z.string(),
  }),
  situationAnalysis: z.object({
    industryOverview: z.string(),
    keyMarketTrends: z.string(),
  }),
  swotAnalysis: z.object({
    strengths: z.string(),
    weaknesses: z.string(),
    opportunities: z.string(),
    threats: z.string(),
  }),
  marketingPlan: z.object({
    businessObjectives: z.string(),
    segmentationTargetingPositioning: z.string(),
    marketingMix4Ps: z.string(),
  }),
  serviceStrategy: z.string(),
  operationsPlan: z.string(),
  managementTeam: z.string(),
  financialProjections: z.string(),
  riskMitigation: z.string(),
})

export async function generateBusinessPlan(
  formData: BusinessPlanData
): Promise<GenerateBusinessPlanResult> {
  try {
    const cookieStore = await cookies()
    const supabase = createServerComponentClient({ cookies: () => cookieStore })

    // ---- 1) Generate plan JSON
    const systemPrompt = `You are an expert business‐plan writer with 20+ years of experience helping entrepreneurs create professional, investor-ready business plans.

TASK: Generate a JSON object that matches the following exact shape (do not output any extra keys or markdown):

{
  "executiveSummary": {
    "businessOverview": string,
    "businessOrigins": string,
    "competitiveAdvantage": string,
    "financialSummary": string
  },
  "situationAnalysis": {
    "industryOverview": string,
    "keyMarketTrends": string
  },
  "swotAnalysis": {
    "strengths": string,
    "weaknesses": string,
    "opportunities": string,
    "threats": string
  },
  "marketingPlan": {
    "businessObjectives": string,
    "segmentationTargetingPositioning": string,
    "marketingMix4Ps": string
  },
  "serviceStrategy": string,
  "operationsPlan": string,
  "managementTeam": string,
  "financialProjections": string,
  "riskMitigation": string
}

REQUIREMENTS:
1. Return ONLY the JSON object (no markdown, no commentary).
2. Populate each string field with 2–3 short paragraphs of professional, formal business language.
3. Use the user’s form inputs—you must not invent data or numbers.
4. Keep each top-level field to roughly 200–400 words.`

    const userPrompt = `Generate a comprehensive business plan using this form input:\n\n${JSON.stringify(
      formData,
      null,
      2
    )}`

    const { object: planObject } = await generateObject({
      model: openai("gpt-4o"),
      schema: businessPlanSchema,
      system: systemPrompt,
      prompt: userPrompt,
    })

    // ---- 2) Auth
    const {
      data: { user },
    } = await supabase.auth.getUser()

    if (!user?.id) {
      return { success: false, error: "Not authenticated" }
    }

    // ---- 3) Ensure user row (FK)
    const { error: upsertUserErr } = await supabase
    .from("users")
    .upsert(
      {
        id: user.id,
        email: user.email,
        full_name: (user.user_metadata as any)?.full_name,
      },
      { onConflict: "email" }    // ← switch here
    );

    if (upsertUserErr) {
      return { success: false, error: upsertUserErr.message }
    }

    const planName = formData.businessName

    // ---- 4) Check if plan exists
    const { data: existing } = await supabase
      .from("business_plans")
      .select("id")
      .eq("user_id", user.id)
      .eq("plan_name", planName)
      .maybeSingle()

    let planId = existing?.id

    if (planId) {
      const { error: updateErr } = await supabase
        .from("business_plans")
        .update({ plan_data: planObject, updated_at: new Date().toISOString() })
        .eq("id", planId)

      if (updateErr) {
        return { success: false, error: updateErr.message }
      }
    } else {
      const { data: inserted, error: insertErr } = await supabase
        .from("business_plans")
        .insert({
          user_id: user.id,
          plan_name: planName,
          plan_data: planObject,
        })
        .select("id")
        .single()

      if (insertErr || !inserted?.id) {
        return { success: false, error: insertErr?.message ?? "Insert failed" }
      }
      planId = inserted.id
    }

    // ---- 5) Link latest unmatched payment to this plan
    const { data: latestPayment } = await supabase
      .from("payments")
      .select("id")
      .eq("user_id", user.id)
      .is("plan_id", null)
      // .eq("status", "paid")   // add if you track status
      .order("created_at", { ascending: false })
      .limit(1)
      .maybeSingle()

    if (latestPayment?.id) {
      await supabase
        .from("payments")
        .update({ plan_id: planId })
        .eq("id", latestPayment.id)
    }

    return { success: true, plan: planObject as GeneratedPlan, planId: planId! }
  } catch (err: any) {
    console.error("Error generating business plan:", err)
    return { success: false, error: err?.message ?? "Unknown error" }
  }
}
